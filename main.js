console.log('#55. JavaScript homework example file');

/*
 *
 * #1
 *
 * Технічне завдання для розробки функції "asyncOperationDemo"
 *
 * Задача:
 * Розробити функцію, яка ілюструє використання асинхронних API Node.js: process.nextTick, setImmediate, і setTimeout.
 * Функція має демонструвати порядок виконання асинхронних операцій в контексті циклу подій Node.js та забезпечувати документацію процесу через систематичне логування.
 *
 * Функціональні вимоги:
 * 1. Вхідні параметри:
 *  - `callback`: Функція зворотнього виклику, яка буде викликана після кожного асинхронного виклику з відповідним ідентифікатором операції.
 *
 * 2. Операції з асинхронним кодом:
 *  - Використання `process.nextTick` для демонстрації миттєвого асинхронного виконання коду після поточних операцій.
 *  - Використання `setImmediate` для демонстрації планування виконання коду на наступний цикл подій.
 *  - Використання `setTimeout` з затримкою `0` для демонстрації виконання коду після всіх запланованих `immediate` і перед наступними ітераціями циклу подій.
 *
 * 3. Логування:
 *  - Логування "Перший виклик" на початку виконання функції.
 *  - Логування "Виконано nextTick", "Виконано setImmediate", і "Виконано setTimeout" під час виконання відповідних асинхронних операцій.
 *  - Логування "Останній виклик" після ініціації всіх асинхронних операцій, але до їх завершення.
 *  - Використання зворотнього виклику для передачі результату кожної асинхронної операції.
 *  - Логування "Завершено виконання: [operation]" після кожної асинхронної дії.
 *
 * Технічні вимоги:
 * - Використання сучасних можливостей JavaScript (ES6+), зокрема асинхронних функцій (async/await) за необхідності.
 * - Належне управління асинхронними процесами та виключеннями для забезпечення коректного виконання функціоналу.
 * - Код має бути чистим, добре структурованим, з логічною структурою та зрозумілими назвами змінних та функцій.
 * - Підготовка функції для легкої інтеграції у тести, використовуючи JEST для мокування залежностей і перевірки поведінки функції.
 *
 */

function asyncOperationDemo(callback) {
  console.log('Перший виклик');

  process.nextTick(() => {
    console.log('Виконано nextTick');
    callback('nextTick');
  });

  setImmediate(() => {
    console.log('Виконано setImmediate');
    callback('setImmediate');
  });

  setTimeout(() => {
    console.log('Виконано setTimeout');
    callback('setTimeout');
  }, 0);

  console.log('Останній виклик');
}

asyncOperationDemo((operation) => {
  console.log(`Завершено виконання: ${operation}`);
});

export { asyncOperationDemo };
